generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(cuid())
  name             String
  email            String             @unique
  password         String
  role             Role
  profilePicture   String?
  backgroundColor  String?
  themePreferences Json?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  announcements    Announcement[]
  auditActorLogs   AuditLog[]         @relation("AuditActor")
  auditTargetLogs  AuditLog[]         @relation("AuditTarget")
  magazineLogs     MagazineLog[]
  monitorLogs      MonitorLog[]
  kioskCheckins    KioskCheckin[]
  shifts           ShiftAssignment[]
  assignedTasks    TaskAssignment[]
  taskStatuses     TaskStatusRecord[]
  eventsCreated    CalendarEvent[]    @relation("CalendarEventCreatedBy")

  @@index([role])
  @@index([email])
  @@index([createdAt])
  @@map("users")
}

model Shift {
  id          String            @id @default(cuid())
  date        String
  period      Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  assignments ShiftAssignment[]

  @@unique([date, period])
  @@index([date])
  @@index([period])
  @@map("shifts")
}

model ShiftAssignment {
  id        String @id @default(cuid())
  shiftId   String
  monitorId String
  monitor   User   @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  shift     Shift  @relation(fields: [shiftId], references: [id], onDelete: Cascade)

  @@unique([shiftId, monitorId])
  @@map("shift_assignments")
}

model Magazine {
  id        String        @id @default(cuid())
  title     String        @unique
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  logs      MagazineLog[]

  @@map("magazines")
}

model MagazineLog {
  id                 String   @id @default(cuid())
  magazineId         String
  weekIdentifier     String
  checkedByMonitorId String
  timestamp          DateTime @default(now())
  checkedByMonitor   User     @relation(fields: [checkedByMonitorId], references: [id], onDelete: Cascade)
  magazine           Magazine @relation(fields: [magazineId], references: [id], onDelete: Cascade)

  @@unique([magazineId, weekIdentifier])
  @@map("magazine_logs")
}

model MonitorLog {
  id              String   @id @default(cuid())
  monitorId       String
  monitorName     String
  date            String
  period          Int
  checkIn         String?
  checkOut        String?
  durationMinutes Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  monitor         User     @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@unique([monitorId, date, period])
  @@index([monitorId])
  @@index([date])
  @@index([createdAt])
  @@map("monitor_logs")
}

model Announcement {
  id         String   @id @default(cuid())
  title      String
  content    String
  authorId   String
  authorName String
  imageUrl   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([authorId])
  @@index([createdAt])
  @@map("announcements")
}

model Task {
  id          String             @id @default(cuid())
  title       String
  description String
  priority    TaskPriority
  dueDate     String
  dueTime     String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  assignments TaskAssignment[]
  statuses    TaskStatusRecord[]

  @@index([priority])
  @@index([dueDate])
  @@index([createdAt])
  @@map("tasks")
}

model TaskAssignment {
  id        String @id @default(cuid())
  taskId    String
  monitorId String
  monitor   User   @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  task      Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, monitorId])
  @@map("task_assignments")
}

model TaskStatusRecord {
  id          String     @id @default(cuid())
  taskId      String
  monitorId   String
  status      TaskStatus
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  monitor     User       @relation(fields: [monitorId], references: [id], onDelete: Cascade)
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, monitorId])
  @@map("task_statuses")
}

model PeriodDefinition {
  id        String   @id @default(cuid())
  period    Int      @unique
  duration  Int
  startTime String
  endTime   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("period_definitions")
}

model CheckinCode {
  id        String   @id @default(cuid())
  code      String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([expiresAt])
  @@index([code])
  @@map("checkin_codes")
}

model AuditLog {
  id           String   @id @default(cuid())
  actorId      String
  targetUserId String?
  action       String
  details      String?
  createdAt    DateTime @default(now())
  actor        User     @relation("AuditActor", fields: [actorId], references: [id], onDelete: Cascade)
  targetUser   User?    @relation("AuditTarget", fields: [targetUserId], references: [id])

  @@index([createdAt])
  @@map("audit_logs")
}

model EventType {
  id            String          @id @default(cuid())
  name          String          @unique
  color         String
  icon          String?
  closesLibrary Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  events        CalendarEvent[]

  @@map("event_types")
}

model CalendarEvent {
  id          String    @id @default(cuid())
  title       String
  typeId      String
  type        EventType @relation(fields: [typeId], references: [id])
  startDate   String
  endDate     String
  allDay      Boolean   @default(false)
  periodStart Int?
  periodEnd   Int?
  description String?
  createdById String?
  createdBy   User?     @relation("CalendarEventCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([startDate])
  @@index([endDate])
  @@map("calendar_events")
}

enum Role {
  LIBRARIAN
  MONITOR
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANNOT_COMPLETE
}

model KioskCheckin {
  id        String   @id @default(cuid())
  monitorId String
  timestamp DateTime @default(now())
  monitor   User     @relation(fields: [monitorId], references: [id], onDelete: Cascade)

  @@index([monitorId, timestamp])
  @@map("kiosk_checkins")
}
